{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jihye821/2025test/blob/main/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EC%A4%91%EA%B0%84%EA%B3%BC%EC%A0%9C%EB%AC%BC\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DkPKaAsoRq5Q"
      },
      "source": [
        "\n",
        "\n",
        "컴퓨터 과학-중간과제물"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "중간과제물 1"
      ],
      "metadata": {
        "id": "0Iknns3TrBPc"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-I7BVVlnRrB0"
      },
      "source": [
        "1-2 AIP 호출코드를 작성, 2015년 1월~2024년 12월까지 개인유형의 현년 전기, 가스, 수도, 지역난방 에너지 사용량 데이터 수집"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "id": "2Y2HEiaiRwAI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "afa864ef-6e45-41ad-b7c6-b06e4f8dae6c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "개인 데이터 1건\n",
            "{'연도': '2015', '월': '02', '전기(EUS)': '189974230', '가스(GUS)': '56487358', '수도(WUS)': '12656888.218', '난방(HUS)': '18793320.213'}\n",
            "API 호출 성공\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "\n",
        "url = \"http://openapi.seoul.go.kr:8088/5055454771646a65313034734e6b6262/json/energyUseDataSummaryInfo/1/1000/2015/02\"\n",
        "api_key = \"5055454771646a65313034734e6b6262\"\n",
        "\n",
        "params = {\n",
        "    'KEY': api_key,\n",
        "    'TYPE': 'json',\n",
        "    'SERVICE': 'energyUseDataSummaryInfo',\n",
        "    'START_INDEX': '1',\n",
        "    'END_INDEX': '1000',\n",
        "    'YEAR': '2015',\n",
        "    'MON': '02'\n",
        "}\n",
        "\n",
        "response = requests.get(url, params=params)\n",
        "response.raise_for_status()\n",
        "\n",
        "if response.status_code == 200:\n",
        "    data = response.json()\n",
        "\n",
        "    if \"energyUseDataSummaryInfo\" in data and \"row\" in data[\"energyUseDataSummaryInfo\"]:\n",
        "        rows = data[\"energyUseDataSummaryInfo\"][\"row\"]\n",
        "\n",
        "        personal_rows = [r for r in rows if r.get(\"MM_TYPE\") == \"개인\"]\n",
        "\n",
        "        if personal_rows:\n",
        "            print(f\"개인 데이터 {len(personal_rows)}건\")\n",
        "            for r in personal_rows:\n",
        "                print({\n",
        "                    \"연도\": r.get(\"YEAR\"),\n",
        "                    \"월\": r.get(\"MON\"),\n",
        "                    \"전기(EUS)\": r.get(\"EUS\"),\n",
        "                    \"가스(GUS)\": r.get(\"GUS\"),\n",
        "                    \"수도(WUS)\": r.get(\"WUS\"),\n",
        "                    \"난방(HUS)\": r.get(\"HUS\")\n",
        "                })\n",
        "        else:\n",
        "            print(\"데이터 없음\")\n",
        "\n",
        "    print(\"API 호출 성공\")\n",
        "\n",
        "else:\n",
        "    print(f\"API 호출 실패: {response.status_code}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2-1 json을 pandas DataFrame으로 변환, 데이터의 기본정보를 출력하는 코드와 실행결과 첨부"
      ],
      "metadata": {
        "id": "xdgP5YmUqzrP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {
        "id": "IO8bsKekR0W_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e0ecdcb-4d70-4ccc-eb64-c7240f4239ee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== 데이터 기본 정보 =====\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 120 entries, 0 to 119\n",
            "Data columns (total 6 columns):\n",
            " #   Column   Non-Null Count  Dtype \n",
            "---  ------   --------------  ----- \n",
            " 0   연도       120 non-null    object\n",
            " 1   월        120 non-null    object\n",
            " 2   전기(EUS)  120 non-null    object\n",
            " 3   가스(GUS)  120 non-null    object\n",
            " 4   수도(WUS)  120 non-null    object\n",
            " 5   난방(HUS)  120 non-null    object\n",
            "dtypes: object(6)\n",
            "memory usage: 5.8+ KB\n",
            "None\n",
            "     연도   월    전기(EUS)   가스(GUS)       수도(WUS)       난방(HUS)\n",
            "0  2015  01  193784708  59133720  12819757.886  22740838.937\n",
            "1  2015  02  189974230  56487358  12656888.218  18793320.213\n",
            "2  2015  03  175215719  49984873  12655474.249  13826348.508\n",
            "3  2015  04  183891769  37306841  12954773.246   5836002.885\n",
            "4  2015  05  177289769  22060892  13086734.214   1320895.801\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "\n",
        "api_key = \"5055454771646a65313034734e6b6262\"\n",
        "\n",
        "all_data = []\n",
        "\n",
        "for year in range(2015, 2025):\n",
        "    for month in range(1, 13):\n",
        "        url = f\"http://openapi.seoul.go.kr:8088/5055454771646a65313034734e6b6262/json/energyUseDataSummaryInfo/1/1000/{year}/{month:02d}\"\n",
        "\n",
        "        try:\n",
        "            response = requests.get(url)\n",
        "            response.raise_for_status()\n",
        "\n",
        "            if response.status_code == 200:\n",
        "                data = response.json()\n",
        "                rows = data.get(\"energyUseDataSummaryInfo\", {}).get(\"row\", [])\n",
        "\n",
        "                personal_rows = [r for r in rows if r.get(\"MM_TYPE\") == \"개인\"]\n",
        "\n",
        "                for r in personal_rows:\n",
        "                    all_data.append({\n",
        "                        \"연도\": r.get(\"YEAR\"),\n",
        "                        \"월\": r.get(\"MON\"),\n",
        "                        \"전기(EUS)\": r.get(\"EUS\"),\n",
        "                        \"가스(GUS)\": r.get(\"GUS\"),\n",
        "                        \"수도(WUS)\": r.get(\"WUS\"),\n",
        "                        \"난방(HUS)\": r.get(\"HUS\")\n",
        "                    })\n",
        "\n",
        "            # # API 부하 방지\n",
        "            # time.sleep(0.2)\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"⚠️ {year}-{month:02d} 요청 실패: {e}\")\n",
        "            continue\n",
        "\n",
        "df = pd.DataFrame(all_data)\n",
        "\n",
        "print(\"\\n===== 데이터 기본 정보 =====\")\n",
        "print(df.info())\n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2-2 연도(year), 계절(season)컬럼을 추가하는 전처리 코드 작성, 변환결과를 출력\n",
        "봄(3-5월), 여름(6-8월), 가을(9-11월), 겨울(12-2월)"
      ],
      "metadata": {
        "id": "DzCY_3eJq2Ch"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {
        "id": "60qOf7uxVdAg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8aa3cd77-0192-4e53-adf3-acf2a72d38ef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== 데이터 기본 정보 =====\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 120 entries, 0 to 119\n",
            "Data columns (total 8 columns):\n",
            " #   Column   Non-Null Count  Dtype \n",
            "---  ------   --------------  ----- \n",
            " 0   연도       120 non-null    int64 \n",
            " 1   월        120 non-null    int64 \n",
            " 2   전기(EUS)  120 non-null    object\n",
            " 3   가스(GUS)  120 non-null    object\n",
            " 4   수도(WUS)  120 non-null    object\n",
            " 5   난방(HUS)  120 non-null    object\n",
            " 6   year     120 non-null    int64 \n",
            " 7   season   120 non-null    object\n",
            "dtypes: int64(3), object(5)\n",
            "memory usage: 7.6+ KB\n",
            "None\n",
            "     연도   월    전기(EUS)   가스(GUS)       수도(WUS)       난방(HUS)  year season\n",
            "0  2015   1  193784708  59133720  12819757.886  22740838.937  2015     겨울\n",
            "1  2015   2  189974230  56487358  12656888.218  18793320.213  2015     겨울\n",
            "2  2015   3  175215719  49984873  12655474.249  13826348.508  2015      봄\n",
            "3  2015   4  183891769  37306841  12954773.246   5836002.885  2015      봄\n",
            "4  2015   5  177289769  22060892  13086734.214   1320895.801  2015      봄\n",
            "5  2015   6  186073153  12677645  14241651.402    294312.634  2015     여름\n",
            "6  2015   7  165114568   8893640  12083879.038    702863.645  2015     여름\n",
            "7  2015   8  242000479   7619018  15164553.742    460288.965  2015     여름\n",
            "8  2015   9  207540868   6518422  14419078.727    305710.728  2015     가을\n",
            "9  2015  10  186473958   8924018  14711828.766   3167520.127  2015     가을\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "\n",
        "api_key = \"5055454771646a65313034734e6b6262\"\n",
        "\n",
        "all_data = []\n",
        "\n",
        "for year in range(2015, 2025):\n",
        "    for month in range(1, 13):\n",
        "        url = f\"http://openapi.seoul.go.kr:8088/5055454771646a65313034734e6b6262/json/energyUseDataSummaryInfo/1/1000/{year}/{month:02d}\"\n",
        "\n",
        "        try:\n",
        "            response = requests.get(url)\n",
        "            response.raise_for_status()\n",
        "\n",
        "            if response.status_code == 200:\n",
        "                data = response.json()\n",
        "                rows = data.get(\"energyUseDataSummaryInfo\", {}).get(\"row\", [])\n",
        "\n",
        "                personal_rows = [r for r in rows if r.get(\"MM_TYPE\") == \"개인\"]\n",
        "\n",
        "                for r in personal_rows:\n",
        "                    all_data.append({\n",
        "                        \"연도\": int(r.get(\"YEAR\")),\n",
        "                        \"월\": int(r.get(\"MON\")),\n",
        "                        \"전기(EUS)\": r.get(\"EUS\"),\n",
        "                        \"가스(GUS)\": r.get(\"GUS\"),\n",
        "                        \"수도(WUS)\": r.get(\"WUS\"),\n",
        "                        \"난방(HUS)\": r.get(\"HUS\")\n",
        "                    })\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"{year}-{month:02d} 요청 실패: {e}\")\n",
        "            continue\n",
        "\n",
        "df = pd.DataFrame(all_data)\n",
        "df['year'] = df['연도']\n",
        "def get_season(month):\n",
        "    if month in [3, 4, 5]:\n",
        "        return '봄'\n",
        "    elif month in [6, 7, 8]:\n",
        "        return '여름'\n",
        "    elif month in [9, 10, 11]:\n",
        "        return '가을'\n",
        "    else:\n",
        "        return '겨울'\n",
        "\n",
        "df['season'] = df['월'].apply(get_season)\n",
        "\n",
        "print(\"\\n===== 데이터 기본 정보 =====\")\n",
        "print(df.info())\n",
        "print(df.head(10))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3-1 연도별 에너지 총 사용량(전기+가스+수도+지역난방)을 선그래프로 시각화,\n",
        "그래프 제목 : '연도별 에너지 사용 총액 변화 - 4128'"
      ],
      "metadata": {
        "id": "CJrN-vB-q1MY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "api_key = \"5055454771646a65313034734e6b6262\"\n",
        "\n",
        "all_data = []\n",
        "\n",
        "for year in range(2015, 2025):\n",
        "    for month in range(1, 13):\n",
        "        url = f\"http://openapi.seoul.go.kr:8088/5055454771646a65313034734e6b6262/json/energyUseDataSummaryInfo/1/1000/{year}/{month:02d}\"\n",
        "\n",
        "        try:\n",
        "            response = requests.get(url)\n",
        "            response.raise_for_status()\n",
        "\n",
        "            if response.status_code == 200:\n",
        "                data = response.json()\n",
        "                rows = data.get(\"energyUseDataSummaryInfo\", {}).get(\"row\", [])\n",
        "\n",
        "                personal_rows = [r for r in rows if r.get(\"MM_TYPE\") == \"개인\"]\n",
        "\n",
        "                for r in personal_rows:\n",
        "                    all_data.append({\n",
        "                        \"연도\": int(r.get(\"YEAR\")),\n",
        "                        \"월\": int(r.get(\"MON\")),\n",
        "                        \"전기(EUS)\": r.get(\"EUS\"),\n",
        "                        \"가스(GUS)\": r.get(\"GUS\"),\n",
        "                        \"수도(WUS)\": r.get(\"WUS\"),\n",
        "                        \"난방(HUS)\": r.get(\"HUS\")\n",
        "                    })\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"{year}-{month:02d} 요청 실패: {e}\")\n",
        "            continue\n",
        "\n",
        "df = pd.DataFrame(all_data)\n",
        "df['year'] = df['연도']\n",
        "\n",
        "\n",
        "# 사용량 컬럼을 숫자로 변환 (혹시 문자열일 경우 대비)\n",
        "df['전기(EUS)'] = pd.to_numeric(df['전기(EUS)'], errors='coerce')\n",
        "df['가스(GUS)'] = pd.to_numeric(df['가스(GUS)'], errors='coerce')\n",
        "df['수도(WUS)'] = pd.to_numeric(df['수도(WUS)'], errors='coerce')\n",
        "df['난방(HUS)'] = pd.to_numeric(df['난방(HUS)'], errors='coerce')\n",
        "\n",
        "# 총 사용량 컬럼 추가\n",
        "df['총사용량'] = df['전기(EUS)'] + df['가스(GUS)'] + df['수도(WUS)'] + df['난방(HUS)']\n",
        "\n",
        "# 연도별 총 사용량 합계\n",
        "yearly_total = df.groupby('year')['총사용량'].sum().reset_index()\n",
        "\n",
        "\n",
        "# 그래프 그리기\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(yearly_total['year'], yearly_total['총사용량'], marker='o', color='blue', linewidth=2)\n",
        "plt.title('연도별 에너지 사용 총액 변화 - 4128', fontsize=14)\n",
        "plt.xlabel('year', fontsize=12)\n",
        "plt.ylabel('총 사용량', fontsize=12)\n",
        "plt.grid(True)\n",
        "plt.xticks(yearly_total['year'])\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "RuMq75jnsE9M",
        "outputId": "e07122b4-16fd-4593-b49e-d1296b46d0a3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 45320 (\\N{HANGUL SYLLABLE NEO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 50529 (\\N{HANGUL SYLLABLE AEG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 48320 (\\N{HANGUL SYLLABLE BYEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-2595865423.py:65: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45320 (\\N{HANGUL SYLLABLE NEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50529 (\\N{HANGUL SYLLABLE AEG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48320 (\\N{HANGUL SYLLABLE BYEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "계절별 가스 사용량 평균을 막대 그래프로 시각화,\n",
        "막대에 구체적인 수치를 표시"
      ],
      "metadata": {
        "id": "1CnbKPKxsFyD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "api_key = \"5055454771646a65313034734e6b6262\"\n",
        "\n",
        "all_data = []\n",
        "\n",
        "for year in range(2015, 2025):\n",
        "    for month in range(1, 13):\n",
        "        url = f\"http://openapi.seoul.go.kr:8088/5055454771646a65313034734e6b6262/json/energyUseDataSummaryInfo/1/1000/{year}/{month:02d}\"\n",
        "\n",
        "        try:\n",
        "            response = requests.get(url)\n",
        "            response.raise_for_status()\n",
        "\n",
        "            if response.status_code == 200:\n",
        "                data = response.json()\n",
        "                rows = data.get(\"energyUseDataSummaryInfo\", {}).get(\"row\", [])\n",
        "\n",
        "                personal_rows = [r for r in rows if r.get(\"MM_TYPE\") == \"개인\"]\n",
        "\n",
        "                for r in personal_rows:\n",
        "                    all_data.append({\n",
        "                        \"연도\": int(r.get(\"YEAR\")),\n",
        "                        \"월\": int(r.get(\"MON\")),\n",
        "                        \"전기(EUS)\": r.get(\"EUS\"),\n",
        "                        \"가스(GUS)\": r.get(\"GUS\"),\n",
        "                        \"수도(WUS)\": r.get(\"WUS\"),\n",
        "                        \"난방(HUS)\": r.get(\"HUS\")\n",
        "                    })\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"{year}-{month:02d} 요청 실패: {e}\")\n",
        "            continue\n",
        "\n",
        "df = pd.DataFrame(all_data)\n",
        "df['year'] = df['연도']\n",
        "def get_season(month):\n",
        "    if month in [3, 4, 5]:\n",
        "        return '봄'\n",
        "    elif month in [6, 7, 8]:\n",
        "        return '여름'\n",
        "    elif month in [9, 10, 11]:\n",
        "        return '가을'\n",
        "    else:\n",
        "        return '겨울'\n",
        "\n",
        "df['season'] = df['월'].apply(get_season)\n",
        "\n",
        "\n",
        "# 한글 폰트 설정 (Mac 기준)\n",
        "matplotlib.rcParams['font.family'] = 'AppleGothic'\n",
        "matplotlib.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# 사용량 컬럼을 숫자로 변환 (혹시 문자열일 경우 대비)\n",
        "df['전기(EUS)'] = pd.to_numeric(df['전기(EUS)'], errors='coerce')\n",
        "df['가스(GUS)'] = pd.to_numeric(df['가스(GUS)'], errors='coerce')\n",
        "df['수도(WUS)'] = pd.to_numeric(df['수도(WUS)'], errors='coerce')\n",
        "df['난방(HUS)'] = pd.to_numeric(df['난방(HUS)'], errors='coerce')\n",
        "\n",
        "# 계절별 가스 사용량 합계\n",
        "season_gas = df.groupby('season')['가스(GUS)'].sum().reindex(['봄','여름','가을','겨울'])\n",
        "\n",
        "# 막대그래프 그리기\n",
        "plt.figure(figsize=(8,6))\n",
        "bars = plt.bar(season_gas.index, season_gas.values, color='blue')\n",
        "\n",
        "# 막대 위에 값 표시\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    plt.text(bar.get_x() + bar.get_width()/2, height,\n",
        "             f'{height:,.0f}k', ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "plt.title('계절별 가스 사용량 합계', fontsize=14)\n",
        "plt.xlabel('계절', fontsize=12)\n",
        "plt.ylabel('가스 사용량', fontsize=12)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "XsnT5v4asGGn",
        "outputId": "c4c7c98d-e78b-4b35-c702-4607d676d224",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 48388 (\\N{HANGUL SYLLABLE BOM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 47492 (\\N{HANGUL SYLLABLE REUM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 44200 (\\N{HANGUL SYLLABLE GYEO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 50872 (\\N{HANGUL SYLLABLE UL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 44228 (\\N{HANGUL SYLLABLE GYE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 51208 (\\N{HANGUL SYLLABLE JEOL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/tmp/ipython-input-1557906216.py:81: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44228 (\\N{HANGUL SYLLABLE GYE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51208 (\\N{HANGUL SYLLABLE JEOL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48324 (\\N{HANGUL SYLLABLE BYEOL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48388 (\\N{HANGUL SYLLABLE BOM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47492 (\\N{HANGUL SYLLABLE REUM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44200 (\\N{HANGUL SYLLABLE GYEO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50872 (\\N{HANGUL SYLLABLE UL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'AppleGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "시각화를 바탕으로 연도별 에너지 사용량 변화에서 나타나는 주요 트렌드를 찾아 분석(200자 이내)"
      ],
      "metadata": {
        "id": "LfWgMY71sMWN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "연도별 에너지 총 사용량을 보면 나타나는 특징이 2020년부터 급격하게 증가했다는 것을 확인할 수 있다. 2020년 이후로는 계속 높은수치를 유지하고 있는데 지구 온난화등 환경의 변화가 워낙 커지다보니 여름/겨울의 에너지 사용량이 늘어난게 아닌가 싶다. 또 2020년이 코로나가 발생한 시기라서 다들 집에서 격리를 해야 하다보니 에너지 사용량이 증가한 것으로 보인다. 위 두가지 이유가 에너지 사용량 그래프가 계속 올라가는 이유가 아닐까 싶다."
      ],
      "metadata": {
        "id": "fcB0dAC1sMvm"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}